<template>
	<uni-navbar-lite :title="title" :is-back="true" :nc-color="'#f1f1f1'">
		<template v-slot:right>
			<button size="mini" style="width: 70px; padding: 0;" @click="quit">{{$t('global.ExitTest')}}</button>
		</template>
	</uni-navbar-lite>
	<scroll-view class="page">
		<view style="background-color: #ffffff; padding: 20px;">
			<text class="title">{{HighGTitle}}</text>
			<text class="remark-text">{{HighGRemark}}</text>
			<view class="space-view">
				<text>ax: {{ax}}</text>
				<text>ay: {{ay}}</text>
				<text>az: {{az}}</text>
			</view>
			<text class="remark-text">{{HighGButtonRemark}}</text>
			<view class="long-btn-view">
				<button class="long-btn" @click="highGButtonAction">{{HighGButton}}</button>
				<text class="remark-text"
					:class="HighGTestResultText?.includes('...') ? '' : (highGTestResult ? 'high-G-test-succeed' : 'high-G-test-fall')"
					v-show="HighGTestResultText?.length != 0">{{HighGTestResultText}}</text>
			</view>
		</view>

		<view style="background-color: #ffffff; padding: 20px; margin-top: 30px;">
			<text class="title">{{gyroscopeTitle}}</text>
			<text class="remark-text">{{gyroscopeRemark}}</text>
			<view class="space-view">
				<text>yzw: {{yaw}}</text>
				<text>{{$t('imu.RotationAngle')+rotationAngle}}°</text>
			</view>
			<text class="remark-text">{{gyroscopeButtonRemark}}</text>
			<view class="long-btn-view">
				<!-- 				<view class="space-view" v-show="!isShowGyroscopeButton">
					<button class="gyroscope-test-fall-btn"
						@click="gyroscopeTestResultAction(false)">{{$t('imu.AngleAbnormal')}}</button>
					<button class="gyroscope-test-succeed-btn"
						@click="gyroscopeTestResultAction(true)">{{$t('imu.AngleNormal')}}</button>
				</view> -->
				<button :class="isShowGyroscopeButton ? 'long-btn' : 'long-btn-g'"
					@click="gyroscopeButtonAction">{{gyroscopeButton}}</button>
				<text class="remark-text"
					:class="gyroscopeTestResultText?.includes($t('imu.AutoDetecting')) ? '' : (gyroscopeTestResult ? 'high-G-test-succeed' : 'high-G-test-fall')"
					v-show="gyroscopeTestResultText?.length != 0">{{gyroscopeTestResultText}}</text>
			</view>
		</view>
		<view style="padding: 30px 20px;">
			<button style="color: #ffffff; background-color: #000000;" @click="next">{{$t('global.NextStep')}}</button>
		</view>
	</scroll-view>
</template>

<script>
	import { onSendCommand, } from '@/uni_modules/ace-bluetooth';
	export default {
		data() {
			return {
				title: "蓝牙" as string | null,
				ax: 0 as number,
				ay: 0 as number,
				az: 0 as number,
				isCounting: false,
				countdown: 10,
				highGTestResult: true as boolean,
				HighGTestResultText: "" as string | null,
				HighGButton: this.$t('global.StartDetection'),
				HighGButtonRemark: this.$t('imu.AccelerometerRemark2'),
				HighGTitle: this.$t('imu.Accelerometer'),
				HighGRemark: this.$t('imu.AccelerometerRemark1'),


				yaw: 0 as number,
				rotationAngle: 0 as number,
				gyroscopeTestResult: true as boolean,
				isShowGyroscopeButton: true as boolean,
				gyroscopeTitle: this.$t('imu.Gyroscope'),
				gyroscopeRemark: this.$t('imu.GyroscopeRemark1'),
				gyroscopeButton: this.$t('global.StartDetection'),
				gyroscopeButtonRemark: this.$t('imu.GyroscopeRemark2'),
				gyroscopeTestResultText: ""
			}
		},

		onLoad(query) {
			this.title = query.title
		},

		methods: {
			highGButtonAction() {
				if (this.isCounting) return
				let axArr : Array<number> = [];
				let ayArr : Array<number> = [];
				let azArr : Array<number> = [];
				const interval = setInterval(() => {
					onSendCommand("imu_test", "read", "", (res) => {
						console.log("imu页面:" + res)
						if (res["command"] == "imu_test") {
							let data = res["data"]

							let data_ax = data["ax"]
							axArr.push(data_ax)
							this.ax = data_ax;

							let data_ay = data["ay"]
							ayArr.push(data_ay)
							this.ay = data_ay;

							let data_az = data["az"]
							azArr.push(data_az)
							this.az = data_az;
						}
					})
				}, 500);

				this.HighGTestResultText = this.$t('imu.AutoDetecting')
				this.isCounting = true
				this.HighGButton = "10"
				const timer = setInterval(() => {
					this.countdown--
					this.HighGButton = `${this.countdown}`
					if (this.countdown <= 0) {
						clearInterval(interval)
						clearInterval(timer)
						this.isCounting = false
						this.countdown = 10
						this.HighGButton = this.$t('global.StartDetection')
						if (axArr.length > 0) {
							this.ax = (axArr.reduce((acc, cur) => acc + cur, 0) / axArr.length).toFixed(3);
						}
						if (ayArr.length > 0) {
							this.ay = (ayArr.reduce((acc, cur) => acc + cur, 0) / ayArr.length).toFixed(3);
						}
						if (azArr.length > 0) {
							this.az = (azArr.reduce((acc, cur) => acc + cur, 0) / azArr.length).toFixed(3);
						}

						let isAx = Math.abs(this.ax) <= 0.2;
						let isAy = Math.abs(this.ay) <= 0.2;
						let isAz = this.az <= 10.0 && this.az >= 9.6

						console.log(isAx)
						console.log(isAy)
						console.log(isAz)

						this.highGTestResult = (isAx && isAy && isAz)

						// this.HighGTestResultText = this.highGTestResult ? this.$t('imu.Normal') : this.$t('imu.Abnormal')
						let abnormalAx = isAx ? "" : " ax"
						let abnormalAy = isAy ? "" : " ay"
						let abnormalAz = isAz ? "" : " az"
						this.HighGTestResultText = this.highGTestResult ? this.$t('imu.Normal') : "检测结果:" + abnormalAx + abnormalAy + abnormalAz + "数据异常"

					}
				}, 1000)
			},
			gyroscopeButtonAction() {
				this.gyroscopeTestResultText = this.$t('imu.AutoDetecting')
				if (this.isShowGyroscopeButton) {
					this.isShowGyroscopeButton = false
					let yaw_interval = setInterval(() => {
						onSendCommand("imu_test", "yaw_test", "", (res) => {
							if (res["command"] == "imu_test") {
								let data = res["data"]
								this.rotationAngle = data["delta_yaw_deg"]
								let status = data["status"]

								clearInterval(yaw_interval)
								this.isShowGyroscopeButton = true
								this.gyroscopeTestResult = status == "success"
								this.gyroscopeTestResultText = this.gyroscopeTestResult ? this.$t('imu.Normal') : this.$t('imu.Abnormal')
							}
						})
					}, 500);
				}
			},
			// gyroscopeTestResultAction(res : boolean) {
			// 	this.isShowGyroscopeButton = true
			// 	this.gyroscopeTestResult = res
			// 	this.gyroscopeTestResultText = res ? this.$t('imu.Normal') : this.$t('imu.Abnormal')
			// 	clearInterval(this.yaw_interval)
			// },
			next() {
				uni.navigateTo({
					url: `/pages/index/pressure-sensor?title=${this.title}`
				})
			},
			quit() {
				//退出工厂模式
				//onSendCommand("", "stop", "");
				uni.navigateBack({
					delta: 100,
					animationType: "slide-out-bottom"
				})
			}
		}
	}
</script>

<style lang="scss">
	.page {
		flex: 1;
		background-color: $uni-bg-color-hover;
		padding-bottom: env(safe-area-inset-bottom);
	}

	.title {
		color: black;
		font-size: 18;
		font-weight: bold;
	}

	.space-view {
		/* 水平居中 */
		align-items: center;
		/* 横向排列 */
		flex-direction: row;
		/* 两端布局 */
		justify-content: space-between;
		margin-top: 15px;
	}

	.btn {
		width: 70px;
		border-color: black;
		border-width: 1px;
	}

	.long-btn-view {
		align-items: center;
		justify-content: center;
		margin-top: 15px;
	}

	.remark-text {
		font-size: 13;
		line-height: 1.4;
		color: gray;
		margin-top: 15px;
	}

	.long-btn {
		width: 220px;
		color: #000;
		border-color: black;
		border-width: 1px;
	}

	.long-btn-g {
		width: 220px;
		color: grey;
		border-color: grey;
		border-width: 1px;
	}

	.high-G-test-succeed {
		color: green;
	}

	.high-G-test-fall {
		color: darkred;
	}

	.gyroscope-test-succeed-btn {
		border-color: black;
		border-width: 1px;
		margin: 0 30px;
	}

	.gyroscope-test-fall-btn {
		color: #fff;
		border-color: black;
		background-color: darkred;
		border-width: 1px;
		margin: 0 30px;
	}
</style>