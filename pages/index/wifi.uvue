<template>
	<uni-navbar-lite :title="title" :is-back="true" :nc-color="'#f1f1f1'">
		<template v-slot:right>
			<button size="mini" style="width: 70px; padding: 0;" @click="quit">{{$t('global.ExitTest')}}</button>
		</template>
	</uni-navbar-lite>
	<scroll-view class="page">
		<view style="background-color: #ffffff; padding: 20px;">
			<text class="title">{{wifiTitle}}</text>
			<view class="space-view">
				<text>{{$t('WiFi.WiFiName')+wifiname}}</text>
				<view class="status-view">
					<view class="status" :style="{ backgroundColor: status ? 'green' : 'darkred'}"></view>
					<text>{{status?$t('WiFi.Connected'):$t('WiFi.NotConnected')}}</text>
				</view>
			</view>
			<text class="remark-text">{{wifiRemark}}</text>
			<view class="long-btn-view">
				<button :class="isShowButton ? 'long-btn' : 'long-btn-g'"
					@click="wifiButtonAction">{{wifiButton}}</button>
			</view>
		</view>
		<view style="padding: 30px 20px;">
			<button style="color: #ffffff; background-color: #000000;" @click="quit">{{completeTest}}</button>
		</view>
	</scroll-view>
</template>

<script lang="uts">
	import { onSendCommand, onConnectToWifi } from '@/uni_modules/ace-bluetooth';
	import { on_updateTestDetailsDB, on_fetchTestDetailsDB } from '@/uni_modules/ace-test-details'
	export default {
		data() {
			return {
				title: "蓝牙" as string | null,
				aceid: '',
				wifiname: '' as string,
				status: false,
				isShowButton: true,
				wifiTitle: this.$t('WiFi.WiFiHotspot'),
				wifiRemark: this.$t('WiFi.StartTest'),
				wifiButton: this.$t('global.StartDetection'),
				completeTest: this.$t('WiFi.TestComplete')

			}
		},

		onLoad(query) {
			this.title = query.title
			this.aceid = query.aceid

			// 防止开启热点后断联, 直接写入测试数据
			// let model = on_fetchTestDetailsDB(this.aceid)
			// if (model) {
			// 	model.wifi_name = "Acemate_096"
			// 	model.wifi = true
			// 	on_updateTestDetailsDB(this.aceid, model)
			// }
		},

		methods: {
			wifiButtonAction() {
				if (!this.isShowButton) {
					return
				}
				this.isShowButton = false
				this.status = false
				this.wifiname = "检测中..."
				onSendCommand("wifi_test", "connect", "", (res) => {
					console.log("wifi页面:" + res)
					if (res["command"] == "wifi_test") {
						let data = res["data"]
						let ssid = data["ssid"]

						this.isShowButton = true
						uni.showLoading({
							title: "正在连接设备WiFi热点...",
							mask: true
						})
						onConnectToWifi(ssid, (status) => {
							this.wifiname = status ? ssid : ''
							this.status = status

							//先取再更新
							let model = on_fetchTestDetailsDB(this.aceid)
							if (model) {
								model.wifi_name = this.wifiname
								model.wifi = status
								on_updateTestDetailsDB(this.aceid, model)
							}

							uni.hideLoading();
							uni.showToast({
								title: status ? '连接热点成功' : '连接热点失败',
								icon: status ? 'success' : 'error'
							})
						})
					}
				})
			},

			quit() {
				//退出工厂模式
				//onSendCommand("", "stop", "");
				uni.navigateBack({
					delta: 100,
					animationType: "slide-out-bottom"
				})
			}
		}
	}
</script>

<style lang="scss">
	.page {
		flex: 1;
		background-color: $uni-bg-color-hover;
		padding-bottom: env(safe-area-inset-bottom);
	}

	.title {
		color: black;
		font-size: 18;
		font-weight: bold;
	}

	.space-view {
		/* 水平居中 */
		align-items: center;
		/* 横向排列 */
		flex-direction: row;
		/* 两端布局 */
		justify-content: space-between;
		margin-top: 15px;
	}

	.btn {
		width: 70px;
		border-color: black;
		border-width: 1px;
	}

	.long-btn-view {
		align-items: center;
		justify-content: center;
		margin-top: 15px;
	}

	.remark-text {
		font-size: 13;
		line-height: 1.4;
		color: gray;
		margin-top: 15px;
	}

	.long-btn {
		width: 220px;
		color: #000;
		border-color: black;
		border-width: 1px;
	}

	.long-btn-g {
		width: 220px;
		color: grey;
		border-color: grey;
		border-width: 1px;
	}

	.status-view {
		/* 水平居中 */
		align-items: center;
		/* 横向排列 */
		flex-direction: row;
	}

	.status {
		width: 20px;
		height: 20px;
		border-radius: 10px;
		margin-right: 8px;
	}
</style>