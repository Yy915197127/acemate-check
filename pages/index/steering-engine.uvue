<template>
	<uni-navbar-lite :title="title" :is-back="true" :nc-color="'#f1f1f1'">
		<template v-slot:right>
			<button v-show="isShow" size="mini" style="width: 70px; padding: 0;"
				@click="quit">{{$t('global.ExitTest')}}</button>
		</template>
	</uni-navbar-lite>
	<scroll-view class="page">
		<view class="module-view">
			<text class="title">{{turntableTitle}}</text>
			<view style="padding: 0 5px;">
				<view class="space-view">
					<button style="padding: 0;" class="btn" v-for="(name, index) in turntable" :key="index"
						@click="turntableBut(name)">{{name}}°</button>
				</view>
				<view class="long-btn-view">
					<text class="remark-text">{{$t('steeringEngine.Offset')+turntableOffset}}°</text>
					<button style="width: 50px; padding: 0; margin-left: 10px;" class="btn" size="mini"
						@click="turntableRevise">{{$t('steeringEngine.Calibrate')}}</button>
				</view>
			</view>
		</view>

		<view class="module-view" style="margin-top: 20px;">
			<text class="title">{{cabinDoorTitle}}</text>
			<view style="padding: 0 5px;">
				<view class="space-view">
					<button style="padding: 0; width: 135px;" class="btn"
						@click="cabinDoorClose">{{$t('steeringEngine.CloseHatch')}}</button>
					<button style="padding: 0; width: 135px;" class="btn"
						@click="cabinDoorOpen">{{$t('steeringEngine.OpenHatch')}}</button>
				</view>
				<view class="long-btn-view">
					<text class="remark-text">{{$t('steeringEngine.Offset')+cabinDoorOffset}}°</text>
					<button style="width: 50px; padding: 0; margin-left: 10px;" class="btn" size="mini"
						@click="cabinDoorRevise">{{$t('steeringEngine.Calibrate')}}</button>
				</view>
			</view>
		</view>

		<view class="module-view" style="margin-top: 20px;">
			<text class="title">{{pitchingTitle}}</text>
			<view style="padding: 0 5px;">
				<view class="space-view">
					<text class="remark-text">{{$t('steeringEngine.ServeElevationAngle')}}</text>
					<text class="">{{angle}}°</text>
				</view>
				<!-- <slider style="margin: 0 5px;" :min="22" :max="157" :step="1" :block-size="25"
					activeBackgroundColor="#90E174" foreColor="#f1f1f1" :value="angle" @changing="angleSliderChangeing"
					@change="angleSliderChange" /> -->

				<native-slider style="overflow: visible;" :min="22" :max="157" :value="angle"
					@changing="angleSliderChangeing" @change="angleSliderChange"></native-slider>
				<view class="space-view">
					<button style="padding: 0; width: 135px;" class="btn" @click="pitchingHighest">最高角度测试</button>
					<button style="padding: 0; width: 135px;" class="btn" @click="pitchingLowest">最低角度测试</button>
				</view>
				<view class="long-btn-view">
					<text class="remark-text">{{$t('steeringEngine.Offset')+pitchingOffset}}°</text>
					<button style="width: 50px; padding: 0; margin-left: 10px;" class="btn" size="mini"
						@click="pitchingRevise">{{$t('steeringEngine.Calibrate')}}</button>
				</view>
			</view>
		</view>
		<view style="padding: 20px 20px;" v-show="isShow">
			<button style="color: #ffffff; background-color: #000000;" @click="next">{{$t('global.NextStep')}}</button>
		</view>
	</scroll-view>
</template>

<script>
	import { onSendCommand } from '@/uni_modules/ace-bluetooth';
	import { onPopupViewController } from '@/uni_modules/ace-revise-popup'
	import { on_UTSupdateTestDetailsDB, on_fetchTestDetailsDB } from '@/uni_modules/ace-test-details'
	import TDModel from '@/models/TDModel.uts'
	export default {
		data() {
			return {
				title: "蓝牙" as string | null,
				aceid: '',
				isShow: true,
				turntableTitle: this.$t('steeringEngine.TurntableServo'),
				cabinDoorTitle: this.$t('steeringEngine.HatchServo'),
				pitchingTitle: this.$t('steeringEngine.PitchServo'),
				turntable: [20, 110, 200, 290],
				turntableOffset: 0,
				cabinDoorOffset: 0,
				pitchingOffset: 0,
				angle: 22
			}
		},

		onLoad(query) {
			this.title = query.title
			this.isShow = query.page != 'unit'
			this.aceid = query.aceid

			//读取校正数据
			onSendCommand("servo_test", "get_offset_angle", "", (res) => {
				let data = res["data"]
				this.turntableOffset = data['feeder_rotate']
				this.cabinDoorOffset = data['door_latch']
				this.pitchingOffset = data['launcher_pitch']
			});

			//偏移量校正弹窗
			uni.$on('offset-dialog', (obj : UTSJSONObject) => {
				switch (obj.type) {
					case "turntable":
						this.turntableOffset = obj.offset
						onSendCommand("servo_test", "calibrate_zero", {
							"servo_type": "feeder_rotate",
							"angle_deg": this.turntableOffset
						});
						break;
					case "cabinDoor":
						this.cabinDoorOffset = obj.offset
						onSendCommand("servo_test", "calibrate_zero", {
							"servo_type": "door_latch",
							"angle_deg": this.cabinDoorOffset
						});
						break;
					case "pitching":
						this.pitchingOffset = obj.offset
						onSendCommand("servo_test", "calibrate_zero", {
							"servo_type": "launcher_pitch",
							"angle_deg": this.pitchingOffset
						});
						break;
					default:
						break;
				}
			})

			uni.$on('result-dialog', (res : UTSJSONObject) => {
				//先取再更新
				if (this.isShow) {
					let model = new TDModel(on_fetchTestDetailsDB(this.aceid))
					if (Object.keys(model).length != 0) {
						model.feeder_rotate = res.feeder_rotate === '1'
						model.door_latch = res.door_latch === '1'
						model.launcher_pitch = res.launcher_pitch === '1'
						on_UTSupdateTestDetailsDB(this.aceid, JSON.stringify(model))
					}
				}
				setTimeout(() => {
					uni.navigateTo({
						url: `/pages/index/pressure-sensor?title=${this.title}&aceid=${this.aceid}`
					})
				}, 500)
			})
		},

		onUnload() {
			uni.$off("offset-dialog")
			uni.$off("result-dialog")
		},

		methods: {
			turntableBut(res : number) {
				onSendCommand("servo_test", "set_angle", {
					"servo_type": "feeder_rotate",
					"angle_deg": res / 2
				});
			},
			turntableRevise() {
				const obj = { "type": "turntable", "title": this.$t('steeringEngine.TurntableServoCalibrate'), "offset": this.turntableOffset };
				this.openOffsetDialogPage(obj)
			},
			cabinDoorClose() {
				onSendCommand("servo_test", "set_angle", {
					"servo_type": "door_latch",
					"angle_deg": 40
				});
			},
			cabinDoorOpen() {
				onSendCommand("servo_test", "set_angle", {
					"servo_type": "door_latch",
					"angle_deg": 115
				});
			},
			cabinDoorRevise() {
				const obj = { "type": "cabinDoor", "title": this.$t('steeringEngine.HatchServoCalibrate'), "offset": this.cabinDoorOffset };
				this.openOffsetDialogPage(obj)
			},
			pitchingRevise() {
				const obj = { "type": "pitching", "title": this.$t('steeringEngine.PitchServoCalibrate'), "offset": this.pitchingOffset };
				this.openOffsetDialogPage(obj)
			},
			openOffsetDialogPage(obj : UTSJSONObject) {
				uni.openDialogPage({
					url: "/pages/dialog-page/offset-dialog?obj=" + JSON.stringify(obj),
					animationType: "fade-in"
				})

				// //弹出原生页面
				// onPopupViewController(obj, (res) => {
				// 	switch (obj['type']) {
				// 		case "turntable":
				// 			this.turntableOffset = res
				// 			onSendCommand("servo_test", "calibrate_zero", {
				// 				"servo_type": "feeder_rotate",
				// 				"angle_deg": this.turntableOffset
				// 			});
				// 			break;
				// 		case "cabinDoor":
				// 			this.cabinDoorOffset = res
				// 			onSendCommand("servo_test", "calibrate_zero", {
				// 				"servo_type": "door_latch",
				// 				"angle_deg": this.cabinDoorOffset
				// 			});
				// 			break;
				// 		case "pitching":
				// 			this.pitchingOffset = res
				// 			onSendCommand("servo_test", "calibrate_zero", {
				// 				"servo_type": "launcher_pitch",
				// 				"angle_deg": this.pitchingOffset
				// 			});
				// 			break;
				// 		default:
				// 			break;
				// 	}
				// })

			},

			angleSliderChange(e : UniSliderChangeEvent) {
				console.log("俯仰角度发生变化：" + e.detail.value);
				onSendCommand("servo_test", "set_angle", {
					"servo_type": "launcher_pitch",
					"angle_deg": e.detail.value
				});
			},
			angleSliderChangeing(e : UniSliderChangeEvent) {
				console.log("俯仰角度持续发生变化：" + e.detail.value);
				this.angle = e.detail.value
			},

			pitchingHighest() {
				onSendCommand("servo_test", "set_angle", {
					"servo_type": "launcher_pitch",
					"angle_deg": 22
				});
			},

			pitchingLowest() {
				onSendCommand("servo_test", "set_angle", {
					"servo_type": "launcher_pitch",
					"angle_deg": 157
				});
			},

			next() {
				uni.openDialogPage({
					url: "/pages/dialog-page/result-dialog",
					animationType: "fade-in"
				})
			},
			quit() {
				//退出工厂模式
				onSendCommand("", "stop", "");
				uni.navigateBack({
					delta: 100,
					animationType: "slide-out-bottom"
				})
			}
		}
	}
</script>

<style lang="scss">
	.page {
		flex: 1;
		background-color: $uni-bg-color-hover;
		padding-bottom: env(safe-area-inset-bottom);
	}

	.module-view {
		background-color: #ffffff;
		padding: 20px;
		width: 100%;
	}

	.title {
		color: black;
		font-size: 18;
		font-weight: bold;
	}

	.space-view {
		/* 水平居中 */
		align-items: center;
		/* 横向排列 */
		flex-direction: row;
		/* 两端布局 */
		justify-content: space-between;
		margin-top: 15px;
	}

	.btn {
		width: 66px;
		border-color: black;
		border-width: 1px;
	}

	.long-btn-view {
		align-items: center;
		justify-content: center;
		/* 横向排列 */
		flex-direction: row;
		margin-top: 15px;
	}

	.remark-text {
		font-size: 13;
		line-height: 1.4;
		color: gray;
	}

	.long-btn {
		border-color: black;
		border-width: 1px;
	}
</style>