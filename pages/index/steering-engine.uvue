<template>
	<uni-navbar-lite :title="title" :is-back="true" :nc-color="'#f1f1f1'">
		<template v-slot:right>
			<button size="mini" style="width: 70px; padding: 0;" @click="quit">{{$t('global.ExitTest')}}</button>
		</template>
	</uni-navbar-lite>
	<scroll-view class="page">
		<view style="background-color: #ffffff; padding: 20px;">
			<text class="title">{{turntableTitle}}</text>
			<view class="space-view">
				<button class="btn" size="mini" @click="turntableBut(turntable[0])">0°</button>
				<button class="btn" size="mini" @click="turntableBut(turntable[1])">90°</button>
				<button class="btn" size="mini" @click="turntableBut(turntable[2])">180°</button>
				<button class="btn" size="mini" @click="turntableBut(turntable[3])">270°</button>
			</view>
			<view class="long-btn-view">
				<text class="remark-text">{{$t('steeringEngine.Offset')+turntableOffset}}°</text>
				<button class="long-btn"
					@click="turntableRevise">{{turntableOffset}}°{{$t('steeringEngine.Calibrate')}}</button>
			</view>
		</view>

		<view style="background-color: #ffffff; padding: 20px; margin-top: 30px;">
			<text class="title">{{cabinDoorTitle}}</text>
			<view class="space-view">
				<button class="cabinDoor-btn" size="mini"
					@click="cabinDoorClose">{{$t('steeringEngine.CloseHatch')}}</button>
				<button class="cabinDoor-btn" size="mini"
					@click="cabinDoorOpen">{{$t('steeringEngine.OpenHatch')}}</button>
			</view>
			<view class="long-btn-view">
				<text class="remark-text">{{$t('steeringEngine.Offset')+cabinDoorOffset}}°</text>
				<button class="long-btn"
					@click="cabinDoorRevise">{{$t('steeringEngine.HatchAngleCalibration')}}</button>
			</view>
		</view>

		<view style="background-color: #ffffff; padding: 20px; margin-top: 30px;">
			<text class="title">{{pitchingTitle}}</text>
			<view class="space-view">
				<text class="remark-text">{{$t('steeringEngine.ServeElevationAngle')}}</text>
				<text class="">{{angle}}°</text>
			</view>
			<slider :min="0" :max="180" :step="10" :block-size="25" activeBackgroundColor="#90E174" foreColor="#f1f1f1"
				:value="angle" @changing="angleSliderChangeing" @change="angleSliderChange" />
			<view class="long-btn-view">
				<text class="remark-text">{{$t('steeringEngine.Offset')+pitchingOffset}}°</text>
				<button class="long-btn"
					@click="pitchingRevise">{{pitchingOffset}}°{{$t('steeringEngine.Calibrate')}}</button>
			</view>
		</view>
		<view style="padding: 30px 20px;">
			<button style="color: #ffffff; background-color: #000000;" @click="next">{{$t('global.NextStep')}}</button>
		</view>
	</scroll-view>
</template>

<script>
	import { onSendCommand } from '@/uni_modules/ace-bluetooth';
	import { onPopupViewController } from '@/uni_modules/ace-revise-popup'
	export default {
		data() {
			return {
				title: "蓝牙" as string | null,
				turntableTitle: this.$t('steeringEngine.TurntableServo'),
				cabinDoorTitle: this.$t('steeringEngine.HatchServo'),
				pitchingTitle: this.$t('steeringEngine.PitchServo'),
				turntable: [0, 90, 180, 270],
				turntableOffset: 0,
				cabinDoorOffset: 0,
				pitchingOffset: 0,
				angle: 90
			}
		},

		onLoad(query) {
			this.title = query.title
			// uni.$on("steering-engine", (res) => {
			// 	switch (res.type) {
			// 		case "turntable":
			// 			this.turntableOffset = res.offset
			// 			onSendCommand("servo_test", "calibrate_zero", {
			// 				"servo_type": "feeder_rotate",
			// 				"angle_deg": this.turntableOffset
			// 			});
			// 			break;
			// 		case "cabinDoor":
			// 			this.cabinDoorOffset = res.offset
			// 			onSendCommand("servo_test", "calibrate_zero", {
			// 				"servo_type": "door_latch",
			// 				"angle_deg": this.cabinDoorOffset
			// 			});
			// 			break;
			// 		case "pitching":
			// 			this.pitchingOffset = res.offset
			// 			onSendCommand("servo_test", "calibrate_zero", {
			// 				"servo_type": "launcher_pitch",
			// 				"angle_deg": this.pitchingOffset
			// 			});
			// 			break;
			// 		default:
			// 			break;
			// 	}
			// })
		},

		// onUnload() {
		// 	console.log("+++++++++++++++++++++++++++steering-engine停止监听+++++++++++++++++++++++++++")
		// 	uni.$off("steering-engine")
		// },

		methods: {
			turntableBut(res : number) {
				onSendCommand("servo_test", "set_angle", {
					"servo_type": "feeder_rotate",
					"angle_deg": res / 2
				});
			},
			turntableRevise() {
				const obj = { "type": "turntable", "title": this.$t('steeringEngine.TurntableServoCalibrate'), "offset": this.turntableOffset };
				this.openDialogPage(obj)
			},
			cabinDoorClose() {
				onSendCommand("servo_test", "set_angle", {
					"servo_type": "door_latch",
					"angle_deg": 40
				});
			},
			cabinDoorOpen() {
				onSendCommand("servo_test", "set_angle", {
					"servo_type": "door_latch",
					"angle_deg": 115
				});
			},
			cabinDoorRevise() {
				const obj = { "type": "cabinDoor", "title": this.$t('steeringEngine.HatchServoCalibrate'), "offset": this.cabinDoorOffset };
				this.openDialogPage(obj)
			},
			pitchingRevise() {
				const obj = { "type": "pitching", "title": this.$t('steeringEngine.PitchServoCalibrate'), "offset": this.pitchingOffset };
				this.openDialogPage(obj)
			},
			openDialogPage(obj : UTSJSONObject) {
				// uni.openDialogPage({
				// 	url: '/pages/dialog-page/revise-dialog?data=' + encodeURIComponent(JSON.stringify(obj)),
				// 	animationType: "fade-in",
				// 	animationDuration: 600
				// })

				//弹出原生页面
				onPopupViewController(obj, (res) => {
					switch (obj['type']) {
						case "turntable":
							this.turntableOffset = res
							onSendCommand("servo_test", "calibrate_zero", {
								"servo_type": "feeder_rotate",
								"angle_deg": this.turntableOffset
							});
							break;
						case "cabinDoor":
							this.cabinDoorOffset = res
							onSendCommand("servo_test", "calibrate_zero", {
								"servo_type": "door_latch",
								"angle_deg": this.cabinDoorOffset
							});
							break;
						case "pitching":
							this.pitchingOffset = res
							onSendCommand("servo_test", "calibrate_zero", {
								"servo_type": "launcher_pitch",
								"angle_deg": this.pitchingOffset
							});
							break;
						default:
							break;
					}
				})

			},

			angleSliderChange(e : UniSliderChangeEvent) {
				console.log("俯仰角度发生变化：" + e.detail.value);
				onSendCommand("servo_test", "set_angle", {
					"servo_type": "launcher_pitch",
					"angle_deg": e.detail.value
				});
			},
			angleSliderChangeing(e : UniSliderChangeEvent) {
				console.log("俯仰角度持续发生变化：" + e.detail.value);
				this.angle = e.detail.value
			},
			next() {
				uni.navigateTo({
					url: `/pages/index/imu?title=${this.title}`
				})
			},
			quit() {
				//退出工厂模式
				//onSendCommand("", "stop", "");
				uni.navigateBack({
					delta: 100,
					animationType: "slide-out-bottom"
				})
			}
		}
	}
</script>

<style lang="scss">
	.page {
		flex: 1;
		background-color: $uni-bg-color-hover;
		padding-bottom: env(safe-area-inset-bottom);
	}

	.title {
		color: black;
		font-size: 18;
		font-weight: bold;
	}

	.space-view {
		/* 水平居中 */
		align-items: center;
		/* 横向排列 */
		flex-direction: row;
		/* 两端布局 */
		justify-content: space-between;
		margin-top: 15px;
	}

	.btn {
		width: 70px;
		border-color: black;
		border-width: 1px;
	}

	.long-btn-view {
		align-items: center;
		justify-content: center;
		margin-top: 15px;
	}

	.remark-text {
		font-size: 13;
		line-height: 1.4;
		color: gray;
	}

	.long-btn {
		margin-top: 15px;
		width: 220px;
		border-color: black;
		border-width: 1px;
	}

	.cabinDoor-btn {
		width: 90px;
		border-color: black;
		border-width: 1px;
	}
</style>