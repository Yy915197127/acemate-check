<template>
	<uni-navbar-lite :title="title" :is-back="true" :nc-color="'#f1f1f1'">
		<template v-slot:right>
			<button size="mini" style="width: 70px; padding: 0;" @click="quit">{{$t('global.ExitTest')}}</button>
		</template>
	</uni-navbar-lite>
	<scroll-view class="page">
		<view style="background-color: #ffffff; padding: 20px;">
			<text class="title">{{psTitle}}</text>
			<view class="space-view">
				<text>{{$t('pressureSensor.PressureValue') + ps}}</text>
				<view class="status-view">
					<view class="status" :style="{ backgroundColor: status ? 'green' : 'darkred'}"></view>
					<text>{{status?$t('pressureSensor.BallPresent'):$t('pressureSensor.NoBall')}}</text>
				</view>
			</view>
			<text class="remark-text">{{psRemark}}</text>
			<view class="long-btn-view">
				<button class="long-btn" @click="psButtonAction">{{isTesting ? psButton2 : psButton1}}</button>
			</view>
		</view>
		<view style="padding: 30px 20px;">
			<button style="color: #ffffff; background-color: #000000;" @click="next">{{$t('global.NextStep')}}</button>
		</view>
	</scroll-view>
</template>

<script>
	import { onSendCommand } from '@/uni_modules/ace-bluetooth';
	import { on_updateTestDetailsDB, on_fetchTestDetailsDB } from '@/uni_modules/ace-test-details'
	export default {
		data() {
			return {
				title: "蓝牙" as string | null,
				aceid: '',
				ps: 0 as number,
				status: false,
				isTesting: false,
				psTitle: this.$t('pressureSensor.PressureSensor'),
				psRemark: this.$t('pressureSensor.StartTest'),
				psButton1: this.$t('global.StartDetection'),
				psButton2: this.$t('pressureSensor.StopDetection'),
				interval: 0,
			}
		},

		onLoad(query) {
			this.title = query.title
			this.aceid = query.aceid
			this.interval = setInterval(() => {
				onSendCommand("pressure_test", "read", "", (res) => {
					if (res["command"] == "pressure_test") {
						this.ps = res["data"]["pressure"] ?? 0
						this.status = this.ps > 200
						if (this.ps > 200) {
							//先取再更新
							let model = on_fetchTestDetailsDB(this.aceid)
							if (model) {
								model.pressure = true
								on_updateTestDetailsDB(this.aceid, model)
							}
						}
					}
				})

			}, 500);
		},

		methods: {
			psButtonAction() {
				this.isTesting = !this.isTesting
				if (this.isTesting) {
					//开启网球检测
					onSendCommand("pressure_test", "tennis_test", "")
				} else {
					onSendCommand("pressure_test", "stop", "")
				}
			},
			next() {
				clearInterval(this.interval)
				onSendCommand("pressure_test", "stop", "")
				uni.navigateTo({
					url: `/pages/index/camera?title=${this.title}&aceid=${this.aceid}`
				})
			},
			quit() {
				//退出工厂模式
				//onSendCommand("", "stop", "");
				uni.navigateBack({
					delta: 100,
					animationType: "slide-out-bottom"
				})
			}
		}
	}
</script>

<style lang="scss">
	.page {
		flex: 1;
		background-color: $uni-bg-color-hover;
		padding-bottom: env(safe-area-inset-bottom);
	}

	.title {
		color: black;
		font-size: 18;
		font-weight: bold;
	}

	.space-view {
		/* 水平居中 */
		align-items: center;
		/* 横向排列 */
		flex-direction: row;
		/* 两端布局 */
		justify-content: space-between;
		margin-top: 15px;
	}

	.btn {
		width: 70px;
		border-color: black;
		border-width: 1px;
	}

	.long-btn-view {
		align-items: center;
		justify-content: center;
		margin-top: 15px;
	}

	.remark-text {
		font-size: 13;
		line-height: 1.4;
		color: gray;
		margin-top: 15px;
	}

	.long-btn {
		width: 220px;
		border-color: black;
		border-width: 1px;
	}

	.status-view {
		/* 水平居中 */
		align-items: center;
		/* 横向排列 */
		flex-direction: row;
	}

	.status {
		width: 20px;
		height: 20px;
		border-radius: 10px;
		margin-right: 8px;
	}
</style>