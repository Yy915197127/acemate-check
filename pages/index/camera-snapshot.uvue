<template>
	<uni-navbar-lite :title="title" :is-back="true" :nc-color="'#f1f1f1'">
		<template v-slot:right>
			<button v-show="isShow" size="mini" style="width: 70px; padding: 0;"
				@click="quit">{{$t('global.ExitTest')}}</button>
		</template>
	</uni-navbar-lite>
	<scroll-view class="page">
		<view class="module-view">
			<text class="title">{{cameraTitle}}</text>
			<view class="space-view">
				<view>
					<text>左</text>
					<view :style="{'width': imageView_w, 'height':imageView_w/1.5}" class="image">
						<image :style="{'width': image_w}" :src="imageList[0]" mode="widthFix" @click="previewImage(0)">
						</image>
					</view>
				</view>
				<view>
					<text>右</text>
					<view :style="{'width': imageView_w, 'height':imageView_w/1.5}" class="image">
						<image :style="{'width': image_w}" :src="imageList[1]" mode="widthFix" @click="previewImage(1)">
						</image>
					</view>
				</view>
			</view>
			<text class="remark-text">{{cameraRemark}}</text>
			<view class="long-btn-view">
				<button class="long-btn" @click="cameraButtonAction">开始测试</button>
			</view>
		</view>
		<view style="padding: 20px 20px;" v-show="isShow">
			<button style="color: #ffffff; background-color: #000000;" @click="next">{{$t('global.NextStep')}}</button>
		</view>
	</scroll-view>
</template>

<script>
	import { onSendCommand } from '@/uni_modules/ace-bluetooth';
	import { on_UTSupdateTestDetailsDB, on_fetchTestDetailsDB } from '@/uni_modules/ace-test-details'
	import TDModel from '@/models/TDModel.uts'

	import imageData from '@/image.json'

	export default {
		data() {
			return {
				title: "蓝牙" as string | null,
				aceid: '',
				isShow: true,
				cameraTitle: '摄像头图像检测',
				cameraRemark: '点击开始测试后，会接收设备左右摄像头拍摄的图像',
				timeout: 0,
				imageList: ['/static/image.png', '/static/image.png', '']
			}
		},

		computed: {
			imageView_w() : number {
				return (uni.getWindowInfo().windowWidth - 50) / 2
			},

			image_w() : string {
				return this.imageList.length == 2 ? '100%' : '30%'
			}
		},

		onLoad(query) {
			this.title = query.title
			this.isShow = query.page != 'unit'
			this.aceid = query.aceid
		},

		methods: {
			cameraButtonAction() {
				uni.showLoading({
					title: '正在获取图像...',
					mask: true
				})
				this.imageList = ['/static/image.png', '/static/image.png', '']

				onSendCommand("camera_snapshot", "snapshot", { "quality": 50 }, (res) => {
					uni.hideLoading();
					clearTimeout(this.timeout)
					const status = res['status']
					const type = res['type']

					if (type != "factory_test") {
						return
					}

					if (status == "success") {
						const data = res['data']
						this.imageList = ['data:image/png;base64,' + data['left_image'], 'data:image/png;base64,' + data['right_image']]
						//先取再更新
						if (this.isShow) {
							let model = new TDModel(on_fetchTestDetailsDB(this.aceid))
							if (Object.keys(model).length != 0) {
								model.snapshot = true
								on_UTSupdateTestDetailsDB(this.aceid, JSON.stringify(model))
							}
						}
					} else {
						uni.showToast({
							title: '获取图像失败，errMsg：' + res['error'],
							icon: "none"
						})
					}
				})

				this.timeout = setTimeout(() => {
					clearTimeout(this.timeout)
					uni.hideLoading();
					uni.showToast({
						title: '获取图像失败，请重试',
						icon: "none"
					})
				}, 20000);
			},

			previewImage(index : number) {
				if (this.imageList.length != 2) {
					return
				}
				uni.previewImage({
					urls: this.imageList,
					current: index,
					indicator: "none",
					indicator: "number",
					loop: true,
					longPressActions: ({
						itemList: ["保存相册"],
						success: (e : LongPressActionsSuccessResult) => {
							this.saveBase64ToAlbum(this.imageList[e.index])
						}
					} as LongPressActionsOptions)
				})
			},

			saveBase64ToAlbum(base64Data) {
				// 生成临时文件路径
				const filePath = `${uni.env.USER_DATA_PATH}/temp_${Date.now()}.png`;
				// 写入文件
				uni.getFileSystemManager().writeFile({
					filePath: filePath,
					data: base64Data.split('data:image/png;base64,').join(''),
					encoding: 'base64',
					success: (e) => {
						uni.saveImageToPhotosAlbum({
							filePath: filePath,
							success: (e : SaveImageToPhotosAlbumSuccess) => {
								uni.hideLoading();
								uni.showToast({
									position: "center",
									icon: "none",
									title: "保存成功，请到手机相册查看"
								})

								//删除缓存文件
								const fileManager = uni.getFileSystemManager()
								fileManager.unlink({
									filePath: filePath
								})
							},
							fail: (e : IUniError) => {
								uni.hideLoading();
								uni.showModal({
									content: "导出失败，errCode：" + e.errCode + "，errMsg：" + e.errMsg + "，errSubject：" + e.errSubject,
									showCancel: false
								});

								//删除缓存文件
								const fileManager = uni.getFileSystemManager()
								fileManager.unlink({
									filePath: filePath
								})
							}
						})

					},
					fail: (err) => {
						console.error('写入临时文件失败:', err);
					}
				});
			},

			next() {
				uni.navigateTo({
					url: `/pages/index/camera?title=${this.title}&aceid=${this.aceid}`
				})
			},
			quit() {
				//退出工厂模式
				onSendCommand("", "stop", "");
				uni.navigateBack({
					delta: 100,
					animationType: "slide-out-bottom"
				})
			}
		}
	}
</script>

<style lang="scss">
	.page {
		flex: 1;
		background-color: $uni-bg-color-hover;
		padding-bottom: env(safe-area-inset-bottom);
	}

	.module-view {
		background-color: #ffffff;
		padding: 20px;
		width: 100%;
	}

	.title {
		color: black;
		font-size: 18;
		font-weight: bold;
	}

	.space-view {
		/* 水平居中 */
		align-items: center;
		/* 横向排列 */
		flex-direction: row;
		/* 两端布局 */
		justify-content: space-between;
		margin-top: 15px;
	}

	.long-btn-view {
		align-items: center;
		justify-content: center;
		margin-top: 15px;
	}

	.remark-text {
		font-size: 13;
		line-height: 1.4;
		color: gray;
		margin-top: 15px;
	}

	.long-btn {
		border-color: black;
		border-width: 1px;
	}

	.image {
		margin-top: 10px;
		align-items: center;
		justify-content: center;
		background-color: #f1f1f1;
		border-radius: 10px;
	}
</style>