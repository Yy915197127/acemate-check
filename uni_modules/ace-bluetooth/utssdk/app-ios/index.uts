/**
 * 引用 iOS 系统库，示例如下：
 * import { UIDevice } from "UIKit";
 * [可选实现，按需引入]
 */


/* 引入 interface.uts 文件中定义的变量 */
import { MyApiOptions, MyApiResult, MyApi, MyApiSync, BluetoothCallback, ConnectionStateBack, ProcessReceivedBlock, ReconnectBlock } from '../interface.uts';

/* 引入 unierror.uts 文件中定义的变量 */
import { MyApiFailImpl } from '../unierror';
import { NEHotspotConfiguration, NEHotspotConfigurationManager } from "NetworkExtension";



/**
 * 引入三方库
 * [可选实现，按需引入]
 *
 * 在 iOS 平台引入三方库有以下两种方式：
 * 1、通过引入三方库framework 或者.a 等方式，需要将 .framework 放到 ./Frameworks 目录下，将.a 放到 ./Libs 目录下。更多信息[详见](https://uniapp.dcloud.net.cn/plugin/uts-plugin.html#ios-平台原生配置)
 * 2、通过 cocoaPods 方式引入，将要引入的 pod 信息配置到 config.json 文件下的 dependencies-pods 字段下。详细配置方式[详见](https://uniapp.dcloud.net.cn/plugin/uts-ios-cocoapods.html)
 *
 * 在通过上述任意方式依赖三方库后，使用时需要在文件中 import:
 * 示例：import { LottieLoopMode	} from 'Lottie'
 */

/**
 * UTSiOS 为平台内置对象，不需要 import 可直接调用其API，[详见](https://uniapp.dcloud.net.cn/uts/utsios.html)
 */


//定义一个字符串类型的空数组 装蓝牙列表名称
let peripheralNames : Array<string> = [];

/* 蓝牙列表回调 */
export function onBluetoothManager(callback : BluetoothCallback) {
	BluetoothManager.shared.onPeripheralDiscovered = ((peripheral : string) => {
		console.log(peripheral)
		peripheralNames.push(peripheral)
		callback(peripheralNames);
	})
}

/* 扫描蓝牙 */
export function onStartScanning() {
	peripheralNames = []
	BluetoothManager.shared.startScanning()
}

/* 停止扫描 */
export function onStopScanning() {
	BluetoothManager.shared.stopScanning()
}

/* 连接蓝牙 */
export function onConnectDevice(peripheral : string, callback : ConnectionStateBack) {
	BluetoothManager.shared.connectDeviceName(peripheral, callback)
}

/* 蓝牙断开连接重连状态 */
export function onReconnectBlock(callback : ReconnectBlock) {
	BluetoothManager.shared.onReconnectBlockUTS = callback
}

/* 断开蓝牙 */
export function onDisconnectPeripheral() {
	BluetoothManager.shared.disconnectPeripheral()
}

/* 获取设备信号强度 */
export function onConnectReadRSSIBut(callback : (rssi : number) => void) {
	BluetoothManager.shared.connectDeviceReadRSSI(callback)
}

/* 向设备发送数据 */
@UTSJS.keepAlive
export function onSendCommand(command : string, action : string, data1 : any, callback ?: ProcessReceivedBlock) {
	let sendData : Map<string, any> = new Map()
	sendData.set("type", "factory_test")
	sendData.set("command", command)
	sendData.set("action", action)
	sendData.set("data", data1)
	BluetoothManager.shared.onSendCommand(data = sendData, dataBlock = (res : Map<string, any>) => {
		callback?.(res)
	})
}

/* 连接设备的WiFi热点 */
export function onConnectToWifi(ssid : string, callback : (status : boolean) => void) {
	let config = new NEHotspotConfiguration(ssid = ssid)
	// let config = new NEHotspotConfiguration(ssid = ssid, passphrase = 'yzkj8888', isWEP = false)
	config.joinOnce = true
	NEHotspotConfigurationManager.shared.removeConfiguration(forSSID = ssid)
	NEHotspotConfigurationManager.shared.apply(config, completionHandler = (error) => {
		if (error === null) {
			console.log('连接成功');
			callback(true)
		} else {
			console.log('连接失败:', error);
			callback(false)
		}
	});
}

/**
 * 异步方法
 *
 * uni-app项目中（vue/nvue）调用示例：
 * 1、引入方法声明 import { myApi } from "@/uni_modules/uts-api"
 * 2、方法调用
 * myApi({
 *   paramA: false,
 *   complete: (res) => {
 *      console.log(res)
 *   }
 * });
 *
 */
export const myApi : MyApi = function (options : MyApiOptions) {

	if (options.paramA == true) {
		// 返回数据
		const res : MyApiResult = {
			fieldA: 85,
			fieldB: true,
			fieldC: 'some message'
		};
		options.success?.(res);
		options.complete?.(res);

	} else {
		// 返回错误
		let failResult = new MyApiFailImpl(9010001);
		options.fail?.(failResult)
		options.complete?.(failResult)
	}

}

/**
 * 同步方法
 *
 * uni-app项目中（vue/nvue）调用示例：
 * 1、引入方法声明 import { myApiSync } from "@/uni_modules/uts-api"
 * 2、方法调用
 * myApiSync(true);
 *
 */
export const myApiSync : MyApiSync = function (paramA : boolean) : MyApiResult {
	// 返回数据，根据插件功能获取实际的返回值
	const res : MyApiResult = {
		fieldA: 85,
		fieldB: paramA,
		fieldC: 'some message'
	};

	return res;
}

/**
 * 更多插件开发的信息详见：https://uniapp.dcloud.net.cn/plugin/uts-plugin.html
 */