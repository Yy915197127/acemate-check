import TestDetailsModel from '@/models/TestDetailsModel'

class ClassManager {
	private static STORAGE_KEY = "Ace_TestDetails_storage"
	private classes : TestDetailsModel[] = []
	private debounceTimer : number | null = null

	constructor() {
		this.loadFromStorage()
	}

	// 创建新实例
	createNewClass(name : string) : TestDetailsModel {
		const newClass = new TestDetailsModel(name)
		console.log("创建测试数据:" + JSON.stringify(newClass))
		// this.classes.push(newClass)
		this.classes.unshift(newClass)//改成最新的数据插到顶端
		this.debouncedSave()
		return newClass
	}

	// 获取所有实例
	getAllClasses() : TestDetailsModel[] {
		return [...this.classes]
	}

	// 根据ID获取实例
	getClassById(id : string) : TestDetailsModel | undefined {
		return this.classes.find(item => item.id === id)
	}

	// 更新实例
	updateClass(id : string, updates : Partial<TestDetailsModel>) : boolean {
		const index = this.classes.findIndex(item => item.id === id)
		if (index !== -1) {
			Object.assign(this.classes[index], updates)
			console.log("更新测试数据:" + JSON.stringify(updates))
			this.debouncedSave()
			return true
		}
		return false
	}

	// 删除实例
	deleteClass(id : string) : boolean {
		const index = this.classes.findIndex(item => item.id === id)
		if (index !== -1) {
			this.classes.splice(index, 1)
			this.debouncedSave()
			return true
		}
		return false
	}

	// 清空所有数据（内存和本地存储）
	clearAllData() : boolean {
		try {
			// 清空内存数组
			this.classes = []
			// 移除本地存储
			uni.removeStorageSync(ClassManager.STORAGE_KEY)
			return true
		} catch (e) {
			console.error("清空数据失败:", e)
			return false
		}
	}

	// 防抖保存
	private debouncedSave() : void {
		if (this.debounceTimer) {
			clearTimeout(this.debounceTimer)
		}
		this.debounceTimer = setTimeout(() => {
			this.saveToStorage()
			this.debounceTimer = null
		}, 500)
	}

	// 保存到本地存储
	private saveToStorage() : void {
		const dataToSave = this.classes.map(item => item.toJSON())

		console.log(this.classes)
		console.log(JSON.stringify(dataToSave))

		uni.setStorageSync(ClassManager.STORAGE_KEY, JSON.stringify(dataToSave))
	}

	// 从本地存储加载
	private loadFromStorage() : void {
		const savedData = uni.getStorageSync(ClassManager.STORAGE_KEY)
		if (savedData) {
			try {
				const parsedData = JSON.parse(savedData)
				this.classes = parsedData.map((item : any) => TestDetailsModel.fromJSON(item))
			} catch (e) {
				console.error("加载数据失败:", e)
				this.classes = []
			}
		}
	}
}

// 导出单例实例
export default new ClassManager()